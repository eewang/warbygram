/* 
  Extra Strength Responsive Grids
  Author & copyright (c) 2013: John Polacek 
  Follow me on Twitter: @johnpolacek

  Dual MIT & GPL license

  Project Page: http://dfcb.github.com/extra-strength-responsive-grids
  Project Repo: https://github.com/dfcb/extra-strength-responsive-grids
  
  Note: box-sizing: border-box; is required for this solution. 
  For more info, see the project page

*/

$grid_columns: 12;
$padOuter: .5em;
$padInner: 1em;
$breakpoints: 0, 480px, 800px;
$breakpoint_prefixes: s-,m-,l-;

@mixin reverseBoxSizing() {
  width: auto;
  box-sizing: content-box;
  float: none;
}

@mixin gridClasses($_prefix:'',$breakpoint_min:'',$breakpoint_max:''){
  .#{$_prefix}grid-all {
    margin: 0; clear: none; float: left; 
    -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;  *behavior: url(boxsizing.htc);    
  }
  @for $i from 1 through $grid-columns {
    .#{$_prefix}grid-#{$i} {
      @extend .#{$_prefix}grid-all;
      width:percentage($i/$grid-columns);
    }
    //* generate easy-to-read grid classes */
    @if $i/$grid-columns == 1/4 {
      .#{$_prefix}grid-quarter {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
    @if $i/$grid-columns == 1/3 {
      .#{$_prefix}grid-third {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
    @if $i/$grid-columns == 1/2 {
      .#{$_prefix}grid-half {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
    @if $i/$grid-columns == 2/3 {
      .#{$_prefix}grid-two-thirds {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
    @if $i/$grid-columns == 3/4 {
      .#{$_prefix}grid-three-quarters {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
    @if $i/$grid-columns == 1 {
      .#{$_prefix}grid-whole {
        @extend .#{$_prefix}grid-#{$i};
      }
    }
  }

  /* padding helper classes */
  .#{$_prefix}padded { padding: $padOuter; }
  .#{$_prefix}padded-left { padding-left: $padOuter; }
  .#{$_prefix}padded-right { padding-right: $padOuter; }
  .#{$_prefix}padded-top { padding-top: $padOuter; }
  .#{$_prefix}padded-bottom { padding-bottom: $padOuter; }
  .#{$_prefix}padded-sides { padding: 0 $padOuter; }
  .#{$_prefix}padded-vertical { padding: $padOuter 0; }

  .#{$_prefix}padded-inner { padding: $padInner; }
  .#{$_prefix}padded-inner-sides { padding: 0 $padInner; }

  .#{$_prefix}padded-reverse { 
    margin: 0 (-$padOuter); 
    @include reverseBoxSizing();
  }
  .#{$_prefix}padded-reverse-all { 
    margin: -$padOuter; 
    @include reverseBoxSizing();
  }

  /* miscellaneous helper classes */
  .#{$_prefix}flow-opposite { float: right; }

  .#{$_prefix}center { text-align:center; }
  .#{$_prefix}left { text-align:left; }
  .#{$_prefix}right { text-align:right; }
  
  @if ($_prefix != '') {

    //* Only generate for prefixed */

    .#{$_prefix}hidden { display: none; }
  
  } @else {

    //* Only generate on top level */
    
    /* For compatibility with Bootstrap (fixed), Foundation, etc. */
    .row { 
      margin: 0 (-$padOuter); 
      @include reverseBoxSizing();
    }

  }
}


//* generate top-level grid classes */
@include gridClasses();

//* generate grid classes for each breakpoint */
@for $i from 1 through length($breakpoint_prefixes) {
  $prefix: nth($breakpoint_prefixes, $i);
  $breakpoint_min: nth($breakpoints, $i) + 1;
  $breakpoint_max: '';
  @if $i < length($breakpoint_prefixes) {
    $breakpoint_max: nth($breakpoints, $i+1);
  }

  //* smallest breakpoint */
  @if $breakpoint_min == 1 {

    @media (max-width: $breakpoint_max) {
      @include gridClasses($prefix);
    }
        
  } @else {

    //* middle breakpoints */
    @if $breakpoint_max != '' {

      @media (min-width: $breakpoint_min) and (max-width: $breakpoint_max) {
        @include gridClasses($prefix);
      }

    //* largest breakpoint */
    } @else {

      @media (min-width: $breakpoint_min) {
        @include gridClasses($prefix);
      }
    }
  }
}